{"version":3,"sources":["../src/app.js"],"names":["require","express","bodyParser","app","port","process","env","PORT","Cors","use","urlencoded","extended","json","req","res","next","header","errHandler","err","multer","MulterError","error","message","users","apartment","reviews","get","send","model","connection","sync","logging","console","log","then","reviewTypeList","reviewType","findAll","dbReviewTypeList","dbReviewTypeTargetList","map","type","getDataValue","forEach","includes","create","target","theType","listen"],"mappings":"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","sourcesContent":["require(\"@babel/polyfill\");\r\nimport \"@babel/polyfill\";\r\nconst express = require('express');\r\nconst bodyParser = require('body-parser')\r\nconst app = express();\r\nconst port = process.env.PORT || 8001;\r\nconst Cors = require('cors')\r\nimport multer from 'multer';\r\nimport * as model from './models.js';\r\n\r\n\r\n\r\n// middle ware\r\n\r\napp.use(bodyParser.urlencoded({ extended: true }));\r\napp.use(bodyParser.json()); // parse form data client\r\n\r\napp.use(function (req, res, next) {\r\n    res.header(\"Access-Control-Allow-Origin\", \"*\");\r\n    res.header(\"Access-Control-Allow-Methods\", \"POST, GET, DELETE, PUT, PATCH, OPTIONS\");\r\n    res.header(\"Access-Control-Allow-Headers\", \"*\");\r\n    next();\r\n});\r\n\r\napp.use('/images', express.static('images'));\r\n\r\n\r\nconst errHandler = (err, req, res, next) => {\r\n    if (err instanceof multer.MulterError) {\r\n        return res.json({\r\n            error: \"upload failed\",\r\n            message: err.message\r\n        })\r\n    }\r\n}\r\napp.use(errHandler);\r\napp.use(Cors())\r\n\r\n\r\n\r\n\r\n// add all the routes\r\nconst users = require('./routes/users.js')\r\nconst apartment = require('./routes/apartments.js')\r\nconst reviews = require('./routes/reviews.js')\r\n\r\napp.use('/users', users)\r\napp.use('/apartments', apartment)\r\napp.use('/reviews', reviews)\r\n\r\napp.get('/', (req, res) => {\r\n    res.send('Welcome to the Revie Platform')\r\n  })\r\n\r\nmodel.connection.sync({\r\n    logging: console.log,\r\n    // force:true\r\n}).then(() => {\r\n    // prefill the reviewtype table with the reviewtypes\r\n    // list of types that can be reviewed\r\n    const reviewTypeList = ['landlord', 'environment', 'apartment', 'amenities']\r\n    model.reviewType.findAll()\r\n        .then((dbReviewTypeList) => {\r\n            // get a list of all the review type target\r\n            const dbReviewTypeTargetList = dbReviewTypeList.map(type => type.getDataValue('target'))\r\n            // check if any review type is absent in database, add it\r\n            reviewTypeList.forEach((type) => {\r\n                // add each type to the database\r\n                // check if review type not already in database\r\n                if (dbReviewTypeTargetList.includes(type) === false) {\r\n                    // add review type to database\r\n                    model.reviewType.create({\r\n                        target: type\r\n                    }).then((theType) => {\r\n                        console.log(`type ${type} added`)\r\n                    })\r\n\r\n                }\r\n            })\r\n        })\r\n\r\n})\r\n    .then(() => {\r\n        console.log('Connection has been established successfully.');\r\n    }).catch((error) => {\r\n        console.error('Unable to connect to the database:', error);\r\n    })\r\n\r\n\r\napp.listen(port, () => {\r\n    console.log(`Running server on port ${port}`);\r\n})"],"file":"app.js"}