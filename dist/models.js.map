{"version":3,"sources":["../src/models.js"],"names":["Sequelize","require","Model","bcrypt","Op","saltRounds","connection","host","dialect","storage","User","password","hashedPassword","compareSync","init","firstName","type","STRING","allowNull","lastName","email","unique","validate","isEmail","is","sequelize","hooks","afterValidate","user","hashSync","Apartment","define","isIn","address","TEXT","reviewType","target","review","comment","helpful","INTEGER","defaultValue","reviewAudioVideo","mediaType","mediaUrl","hasMany","as","onDelete","belongsToMany","through"],"mappings":"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","sourcesContent":["const Sequelize = require('sequelize');\r\nconst { Model} = require(\"sequelize\");\r\nconst bcrypt = require('bcrypt');\r\nconst Op = Sequelize.Op;\r\nconst saltRounds = 10;\r\n// connect to database\r\nconst connection = new Sequelize('db', 'user', 'pass', {\r\n    host: 'localhost',\r\n    dialect: 'sqlite',\r\n    storage: 'db.sqlite'\r\n})\r\n\r\nclass User extends Model {\r\n    isPasswordCorrect (password, hashedPassword) {\r\n        // password: sent from client\r\n        // hashedPassword: the stored hashed passwprd\r\n        if (bcrypt.compareSync(password, hashedPassword)) {\r\n            return true\r\n        }\r\n        return false\r\n    }\r\n}\r\nUser.init({\r\n    firstName: {\r\n        type: Sequelize.STRING,\r\n        allowNull: false,\r\n    },\r\n    lastName: {\r\n        type: Sequelize.STRING,\r\n        allowNull: false,\r\n    },\r\n    email: {\r\n        type: Sequelize.STRING,\r\n        allowNull: false,\r\n        unique: true,\r\n        validate: {\r\n            isEmail: true\r\n        }\r\n    },\r\n    password: {\r\n        type: Sequelize.STRING(64),\r\n        is: /^[0-9a-f]{64}$/i\r\n      }\r\n}, {\r\n    sequelize: connection,\r\n    hooks: {\r\n        afterValidate: (user) => {\r\n            user.password = bcrypt.hashSync(user.password, saltRounds)\r\n        }\r\n    }\r\n});\r\n\r\n// information about the apartment\r\nconst Apartment = connection.define('Apartment', {\r\n    type: {\r\n        type: Sequelize.STRING,\r\n        allowNull: false,\r\n        validate: {\r\n            isIn: [['2 bedroom flat', '3 bedroom flat','a room', 'a room self contain', 'a room and palour self contain','a room and palour']],\r\n        }\r\n    },\r\n    address: {\r\n        type: Sequelize.TEXT,\r\n        allowNull: false,\r\n    },\r\n})\r\n\r\n// Review type indicates the type of review\r\nconst reviewType = connection.define('reviewType', {\r\n    // target could be -> landlord,environment,apartment,amenities. This should be pre-populated by admin\r\n    target: {\r\n        type: Sequelize.STRING,\r\n        allowNull: false,\r\n        validate: {\r\n            isIn: [['landlord', 'environment', 'apartment', 'amenities']],\r\n        }\r\n    }\r\n})\r\n\r\n// review table contains the various comments about apartments, enviroment,landlord etc\r\nconst review = connection.define('Review', {\r\n    comment: {\r\n        type: Sequelize.TEXT,\r\n        allowNull: true\r\n    },\r\n    helpful: {\r\n        type: Sequelize.INTEGER,\r\n        defaultValue: 0\r\n    }\r\n})\r\n\r\n\r\n// review media files contains optional videos and or images for per review\r\nconst reviewAudioVideo = connection.define('ReviewAudioVideo', {\r\n    mediaType: {\r\n        type: Sequelize.STRING,\r\n        allowNull: false,\r\n        validate: {\r\n            isIn: [['video', 'image']],\r\n        }\r\n    },\r\n    mediaUrl: {\r\n        type: Sequelize.STRING,\r\n        allowNull: false\r\n    }\r\n})\r\n\r\n// Establish relationships among entities\r\nreviewType.hasMany(review) // A review type will have many reviews\r\n\r\nUser.hasMany(review) // A user will have many reviews\r\n\r\nApartment.hasMany(review, {\r\n    as: 'All_Reviews',\r\n    onDelete: 'CASCADE'\r\n}) // An apartment will have many reviews\r\n\r\nreview.hasMany(reviewAudioVideo, {\r\n    as: 'media',\r\n    onDelete: 'CASCADE'\r\n}) // A review can have many images and / or videos\r\n\r\n// A user may have lived in many apartments before and vice versa\r\nApartment.belongsToMany(User, {as: 'Tenants', through: 'CustomerApartments'})\r\nUser.belongsToMany(Apartment, {as: 'Apartments', through: 'CustomerApartments'})\r\n\r\nexport {User, Apartment, reviewType, review, reviewAudioVideo, connection};\r\n\r\n\r\n\r\n\r\n\r\n"],"file":"models.js"}