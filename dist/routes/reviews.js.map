{"version":3,"sources":["../../src/routes/reviews.js"],"names":["reviewRoute","require","Router","upload","verifyToken","post","single","req","res","requiredkeys","key","Object","keys","body","includes","status","json","comment","ApartmentId","reviewTypeId","apartmentCtrl","getAnApartment","apartment","console","log","models","review","create","UserId","userId","newReview","file","mimetype","startsWith","reviewAudioVideo","mediaType","mediaUrl","filename","ReviewId","getDataValue","params","id","undefined","destroy","where","patch","helpful","findOne","current_review","data","update","get","include","model","as","module","exports"],"mappings":"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","sourcesContent":["const reviewRoute = require('express').Router();\r\n// import * as reviewCtrl from '../controllers/reviewController.js';\r\nimport * as apartmentCtrl from '../controllers/apartmentController.js';\r\n\r\nconst upload = require('../dependencies.js').upload;\r\nimport 'dotenv/config';\r\nconst verifyToken = require('../dependencies.js').verifyToken;\r\nimport * as models from '../models'\r\n\r\n\r\n\r\n// post a review route\r\nreviewRoute.post('/', upload.single('media'), verifyToken, async (req, res) => {\r\n    const requiredkeys = [\"comment\", \"ApartmentId\", \"reviewTypeId\"]\r\n\r\n    // check if all required keys are present\r\n    for (const key of requiredkeys) {\r\n        if (!Object.keys(req.body).includes(key)) {\r\n            return res.status(400).json({\r\n                'success': false,\r\n                \"data\": `${key} is required but missing`\r\n            })\r\n        }\r\n    }\r\n    // check if any required key has empty value\r\n    if (req.body.comment === \"\" || req.body.ApartmentId === \"\" || req.body.reviewTypeId === \"\") {\r\n        return res.status(400).json({ \"success\": false, \"data\": \"required fields must not be blank\" })\r\n    }\r\n    // check if apartment with the specified id exist\r\n    try {\r\n        const apartment = await apartmentCtrl.getAnApartment(req.body.ApartmentId)\r\n        if (!apartment) {\r\n            return res.status(400).json({ 'success': false, \"data\": `apartment with id ${req.body.ApartmentId} does not exist` })\r\n        }\r\n    } catch (error) {\r\n        console.log(error)\r\n        return res.json(error)\r\n    }\r\n\r\n    try {\r\n        // store the review\r\n        const newReview = await models.review.create({\r\n            ...req.body, UserId: req.userId,\r\n        })\r\n        // store the image or video if any\r\n        if (req.file) {\r\n            let mimetype = 'image';\r\n            if (req.file.mimetype.startsWith('video')) {\r\n                mimetype = 'video'\r\n            }\r\n\r\n            await models.reviewAudioVideo.create({\r\n                mediaType: mimetype,\r\n                mediaUrl: req.file.filename,\r\n                ReviewId: newReview.getDataValue('id')\r\n            })\r\n        }\r\n\r\n        return res.status(201).json({\r\n            \"success\": true,\r\n            \"data\": newReview\r\n        })\r\n\r\n\r\n    } catch (error) {\r\n        console.log(error)\r\n        return res.json(error)\r\n    }\r\n})\r\n\r\n// delete a review route\r\nreviewRoute.delete('/:id', verifyToken, async (req, res) => {\r\n    if (req.params.id === undefined) {\r\n        return res.status(422).json({ \"success\": false, \"data\": \"No id for review to be deleted specified\" })\r\n    }\r\n    await models.review.destroy({\r\n        where: {\r\n            id: req.params.id\r\n        }\r\n    })\r\n    return res.status(200).json({ 'success': true, \"data\": `review with id ${req.params.id} has been removed` })\r\n})\r\n// patch a review route\r\nreviewRoute.patch('/:id', async (req, res) => {\r\n    if (req.params.id === undefined) {\r\n        return res.status(422).json({ \"success\": false, \"data\": \"No id for review to be deleted specified\" })\r\n    }\r\n    if (req.body.helpful) {\r\n        try {\r\n            // get current review to be updated\r\n            const current_review = await models.review.findOne({ where: { id: req.params.id } })\r\n            // create a new data to update with\r\n            const data = { ...req.body }\r\n            // increment helpful by one if true\r\n            if (req.body.helpful === true) {\r\n                data.helpful = current_review.getDataValue('helpful') + 1\r\n            }\r\n            await models.review.update(data, { where: { id: req.params.id } })\r\n            // store the image or video if any\r\n        } catch (error) {\r\n            console.log(error)\r\n            return res.json(error)\r\n        }\r\n    }\r\n    return res.status(200).json({ \"success\": true, \"data\": `review with id ${req.params.id} updated successfully` })\r\n\r\n})\r\n\r\n// get a review\r\nreviewRoute.get('/:id', async (req, res) => {\r\n    try {\r\n        const review = await models.review.findOne({\r\n            where: {\r\n                id: req.params.id\r\n            },\r\n            include: [{\r\n                model: models.reviewAudioVideo, as: 'media'\r\n            }]\r\n        })\r\n        return res.status(200).json({'success':true, data:review})\r\n    } catch (error) {\r\n        console.log(error)\r\n        return res.json(error)\r\n    }\r\n\r\n})\r\n\r\n\r\n\r\n\r\nmodule.exports = reviewRoute"],"file":"reviews.js"}