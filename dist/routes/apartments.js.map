{"version":3,"sources":["../../src/routes/apartments.js"],"names":["apartmentRoute","require","Router","verifyToken","post","req","res","body","type","undefined","address","status","json","apartmentCtrl","apartmentType","data","addAnApartment","userId","newApartment","newApartmentId","getDataValue","console","log","errors","get","getAllApartment","allApartment","error","patch","id","params","userCtrl","getUserApartments","all_user_apartments","searched_apartment","filter","p","Number","length","updateAnApartment","send","getAnApartment","Apartment","module","exports"],"mappings":"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","sourcesContent":["const apartmentRoute = require('express').Router();\r\nimport 'dotenv/config';\r\nimport * as apartmentCtrl from '../controllers/apartmentController.js';\r\nimport * as userCtrl from '../controllers/userController.js';\r\nconst verifyToken = require('../dependencies.js').verifyToken;\r\n\r\n\r\n// route to add an apartment\r\napartmentRoute.post('/', async (req, res) => {\r\n    if (req.body.type === undefined || req.body.address === undefined) {\r\n        return res.status(400).json({ 'success': false, 'data': 'apartment type and address must be specified' })\r\n    }\r\n\r\n    if (!req.body.type in apartmentCtrl.apartmentType) {\r\n        return res.status(406).json({\r\n            'success': false,\r\n            data: ` apartment type must be one of \r\n        ['2 bedroom flat', '3 bedroom flat','a room', 'a room self contain', 'a room and palour self contain','a room and palour']`\r\n        })\r\n    }\r\n    try {\r\n        const newApartment = await apartmentCtrl.addAnApartment(req.body, req.userId)\r\n        // console.log(newApartment)\r\n        const newApartmentId = newApartment.getDataValue('id')\r\n        // stores the new apartmentid and userid in customer apartment table\r\n        return res.status(201).json({\r\n            'success': true,\r\n            'data': newApartment\r\n        })\r\n    } catch (error) {\r\n        console.log(error)\r\n        res.status(422).json({ 'success': false, errors: error })\r\n    }\r\n\r\n\r\n})\r\n\r\n// get all apartments\r\napartmentRoute.get('/', async (req, res) => {\r\n    try {\r\n        const allApartment = await apartmentCtrl.getAllApartment()\r\n        return res.status(200).json({\r\n            'success': true,\r\n            'data': allApartment\r\n        })\r\n    } catch (error) {\r\n        return res.json({ 'success': false, error: error })\r\n    }\r\n\r\n})\r\n\r\n// route to update an apartment\r\napartmentRoute.patch('/:id', verifyToken, async (req, res) => {\r\n    const id = req.params.id\r\n\r\n    if (req.body.type !== undefined && !req.body.type in apartmentCtrl.apartmentType) {\r\n        return res.status(406).json({\r\n            'success': false,\r\n            data: ` apartment type must be one of \r\n        ['2 bedroom flat', '3 bedroom flat','a room', 'a room self contain', 'a room and palour self contain','a room and palour']`\r\n        })\r\n    }\r\n\r\n    // get the apartment with such id\r\n    try {\r\n        // get all apartments of the current user\r\n        let all_user_apartments = await userCtrl.getUserApartments(req.userId)\r\n        // extract the list of apartments\r\n        all_user_apartments =  all_user_apartments.getDataValue('Apartments')\r\n        // console.log(all_user_apartments);\r\n        // check if the current apartment to be updated belongs to the current user\r\n        const searched_apartment = all_user_apartments.filter(p => p.getDataValue('id') === Number(id))\r\n        \r\n        if (searched_apartment.length === 0) {\r\n            return res.status(400).json({'success':false, 'data':'You cannot update an apartment not yours'})\r\n        }else {\r\n            await apartmentCtrl.updateAnApartment(id, req.body)\r\n            return res.status(200).json({'success':true, 'data':` apartment with id ${id} successfully updated`})\r\n        }\r\n    } catch (error) {\r\n        console.log(error)\r\n        res.send(error)\r\n    }\r\n})\r\n\r\n\r\n// get an apartment\r\napartmentRoute.get('/:id', async (req, res) => {\r\n    const id = req.params.id\r\n    try {\r\n        const Apartment = await apartmentCtrl.getAnApartment(id)\r\n        return res.status(200).json({\r\n            'success': true,\r\n            'data': Apartment\r\n        })\r\n    } catch (error) {\r\n        console.log(error)\r\n        return res.json({ 'success': false, error: error })\r\n    }\r\n\r\n})\r\n\r\n\r\n\r\nmodule.exports = apartmentRoute"],"file":"apartments.js"}