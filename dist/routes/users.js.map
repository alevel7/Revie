{"version":3,"sources":["../../src/routes/users.js"],"names":["usersRoute","require","Router","jwt","verifyToken","post","req","res","userCtrl","addUser","body","newUser","token","sign","id","getDataValue","process","env","MY_SECRET","status","json","console","log","send","email","password","getUserByEmail","users","length","models","User","prototype","isPasswordCorrect","data","userData","errors","get","getAllUsers","allUsers","params","Number","userId","getAUser","user","patch","updateAUser","module","exports"],"mappings":"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","sourcesContent":["const usersRoute = require('express').Router();\r\nconst jwt = require('jsonwebtoken');\r\nimport * as userCtrl from '../controllers/userController.js';\r\nimport 'dotenv/config';\r\nconst verifyToken = require('../dependencies.js').verifyToken;\r\nimport * as models from '../models'\r\n\r\n// THE ROUTES\r\n\r\n// route to create a user\r\nusersRoute.post('/', async (req, res) => {\r\n    // extract the user data an validate\r\n    try {\r\n        const newUser = await userCtrl.addUser(req.body)\r\n        const token = jwt.sign({ id:newUser.getDataValue('id') }, process.env.MY_SECRET);\r\n        return res.status(200).json({\r\n            \"status\": \"success\",\r\n            \"data\": {\r\n              \"token\": token,\r\n              \"userData\": newUser\r\n            }})\r\n    } catch (error) {\r\n        console.log(error)\r\n        return res.status(422).send(error)\r\n    }\r\n})\r\n\r\n// route to sign in a user\r\nusersRoute.post('/signin', async (req, res) => {\r\n    const {email, password} = req.body\r\n    if (email == '' || password == ''){\r\n        res.status(406).json({'success':false, 'data':'Username and password is required'})\r\n    }\r\n    // check whether user with such email exist\r\n    try {\r\n        // fetch all users with such email\r\n        const users = await userCtrl.getUserByEmail(email)\r\n        // check if any user exists or not\r\n        if (users.length == 0) {\r\n            return res.status(400).json({'success':false, 'data':'invalid email or password'})\r\n        }\r\n        // check if the user password is correct\r\n        if (models.User.prototype.isPasswordCorrect(password, users[0].getDataValue('password'))) {\r\n            // generate a login token\r\n            const token = jwt.sign({ id:users[0].getDataValue('id') }, process.env.MY_SECRET);\r\n\r\n            return res.status(400).json({'success':true, data: {\r\n                token: token,\r\n                userData: users[0]\r\n            }})\r\n        }\r\n        return res.status(400).json({'success':false, 'data':'invalid email or password'})\r\n    } catch (error) {\r\n        console.log(error)\r\n        res.status(404).json({'success':false, errors:error})\r\n    }\r\n})\r\n// route to get all users\r\nusersRoute.get('/', verifyToken, async (req, res) => {\r\n    // extract all users\r\n    try {\r\n        // const allUsers = await model.User.findAll()\r\n        const allUsers = await userCtrl.getAllUsers()\r\n        res.status(200).json({\"success\": true, \"data\": allUsers})\r\n    } catch (error) {\r\n        res.status(200).json({\"success\": false, errors: error})\r\n    }\r\n})\r\n\r\n// route to get a single user\r\nusersRoute.get('/:id',verifyToken, async (req, res) => {\r\n    // get the user with the specified id\r\n    const id = req.params.id\r\n    if (Number(id) !== Number(req.userId)){\r\n        return res.status(400).json({'success':false, 'data':'Unathorized User'})\r\n    }\r\n    try {\r\n        const user = await userCtrl.getAUser(id)\r\n        res.status(200).json({'success':true, data:user})\r\n    } catch (error) {\r\n        res.status(404).json({'success':false, errors:error.errors})\r\n    }\r\n\r\n})\r\n\r\n// route to  update a user\r\nusersRoute.patch('/:id',verifyToken, async (req, res) => {\r\n    // get the user to be updated\r\n    const id = req.params.id\r\n    if (Number(id) !== Number(req.userId)){\r\n        return res.status(400).json({'success':false, 'data':'Unathorized User'})\r\n    }\r\n    try {\r\n        await userCtrl.updateAUser(id, req.body)\r\n        return res.status(200).json({'success':true, data:`User with id ${id} updated successfully`})\r\n    } catch (error){\r\n        console.log(error)\r\n        return res.status(404).json({'success':false, errors:error.errors})\r\n    } \r\n})\r\n\r\n\r\n\r\nmodule.exports = usersRoute"],"file":"users.js"}